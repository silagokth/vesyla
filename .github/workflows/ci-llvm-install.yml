name: Install LLVM with MLIR

on:
  workflow_call:
  workflow_dispatch:

env:
  LLVM_SOURCE_PATH: ${{ github.workspace }}/llvm-project
  LLVM_INSTALL_PATH: ${{ github.workspace }}/llvm-install
  LLVM_BUILD_PATH: ${{ github.workspace }}/llvm-build
  LLVM_VERSION: "20.1.7"

jobs:
  llvm-install:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2

    - name: Restore LLVM Cache if available
      id: cache-llvm
      uses: actions/cache@v4
      env:
        cache-name: cache-llvm
      with: 
        path: |
          ${{ env.LLVM_INSTALL_PATH }}
          ${{ env.LLVM_SOURCE_PATH }}
          ${{ env.LLVM_BUILD_PATH }}
        key: ${{ runner.os }}-llvm-${{ env.LLVM_VERSION }}
        restore-keys: |
          ${{ runner.os }}-llvm-${{ env.LLVM_VERSION }}
          ${{ runner.os }}-llvm-

    - name: Check if LLVM is already installed
      id: check-llvm
      uses: ./.github/actions/check-llvm-install
      with:
        llvm-install-path: ${{ env.LLVM_INSTALL_PATH }}
        llvm-source-path: ${{ env.LLVM_SOURCE_PATH }}
        llvm-build-path: ${{ env.LLVM_BUILD_PATH }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential cmake python-is-python3 zlib1g-dev ninja-build clang lld wget
        pip3 install PyYAML

    - name: Clone LLVM
      if: steps.check-llvm.outputs.llvm_installed == 'false'
      run: |
        mkdir -p ${{ env.LLVM_INSTALL_PATH }}
        mkdir -p ${{ env.LLVM_BUILD_PATH }}
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.LLVM_VERSION }}/llvm-project-${{ env.LLVM_VERSION }}.src.tar.xz
        tar xvf ./llvm-project-${{ env.LLVM_VERSION }}.src.tar.xz
        mv ./llvm-project-${{ env.LLVM_VERSION }}.src ${{ env.LLVM_SOURCE_PATH }}

    - name: Configure LLVM build
      if: steps.check-llvm.outputs.llvm_installed == 'false'
      run: |
          cd ${{ env.LLVM_BUILD_PATH }}
          cmake -G Ninja ${{ env.LLVM_SOURCE_PATH }}/llvm \
          -DLLVM_ENABLE_PROJECTS="clang;mlir" \
          -DCLANG_ENABLE_CIR=ON \
          -DLLVM_TARGETS_TO_BUILD="Native;NVPTX;AMDGPU" \
          -DCMAKE_INSTALL_PREFIX="${{ env.LLVM_INSTALL_PATH }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DLLVM_ENABLE_LLD=ON

    - name: Build LLVM with MLIR
      if: steps.check-llvm.outputs.llvm_installed == 'false'
      run: |
          cd ${{ env.LLVM_BUILD_PATH }}
          cmake --build . --target check-mlir
          ninja install
