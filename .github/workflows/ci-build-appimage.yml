name: Create AppImage

on:
  workflow_call:
    outputs:
      version:
        description: "Version from the built vesyla appimage"
        value: ${{ jobs.build.outputs.version }}

env:
  LLVM_SOURCE_PATH: ${{ github.workspace }}/llvm-project
  LLVM_INSTALL_PATH: ${{ github.workspace }}/llvm-install
  LLVM_BUILD_PATH: ${{ github.workspace }}/llvm-build
  LLVM_VERSION: "20.1.7"

jobs:
  run-cargo-tests:
    name: Run Cargo tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install bender
        run: |
          curl --proto '=https' --tlsv1.2 https://pulp-platform.github.io/bender/init -sSf | sh
          mkdir -p $HOME/.local/bin
          mv bender $HOME/.local/bin/.
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Check bender installation
        run: bender --version

      - name: Run Cargo tests
        run: |
          cd modules
          RUST_BACKTRACE=1 cargo test --all

  build:
    name: Build AppImage
    runs-on: ubuntu-22.04
    env:
      LLVM_HOME: ${{ github.workspace }}/llvm-build
    outputs:
      version: ${{ steps.check-version.outputs.version }}
    steps:
      - name: Restore LLVM Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.LLVM_INSTALL_PATH }}
            ${{ env.LLVM_SOURCE_PATH }}
            ${{ env.LLVM_BUILD_PATH }}
          key: ${{ runner.os }}-llvm-${{ env.LLVM_VERSION }}
          restore-keys: |
            ${{ runner.os }}-llvm-${{ env.LLVM_VERSION }}
            ${{ runner.os }}-llvm-

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug print of llvm-build
        run: |
          pwd
          ls -al .
          ls -al ..
          ls -al ../..
          echo $LLVM_HOME
          ls $LLVM_HOME
          ls $LLVM_HOME/lib/cmake/mlir
          ls $LLVM_HOME/lib/cmake/llvm

      - name: Build project
        run: |
          set -e
          make all
          make install
          set +e

      - name: Check version
        id: check-version
        run: |
          version=$(./vesyla --version | grep '^vesyla ' | awk '{print $2}')
          echo "$version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Upload built artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: vesyla-${{ github.sha }}
          path: ./vesyla
          overwrite: true
