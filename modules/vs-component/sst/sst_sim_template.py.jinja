import sst
import os
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--debug", action="store_true")
parser.add_argument("--clock", type=int, default=100e6)
parser.add_argument("--io_buffer_size", type=int, default=1024)
parser.add_argument("--word_bitwidth", type=int, default=16)
parser.add_argument("--print_frequency", type=int, default=1)
parser.add_argument("--io_input_buffer_filepath", type=str, default="io_input_buffer.bin")
parser.add_argument("--io_output_buffer_filepath", type=str, default="io_output_buffer.bin")
parser.add_argument("--assembly_program_path", type=str, default="assembly_program.bin")
args = parser.parse_args()

script_path = os.path.abspath(__file__)
script_path = os.path.dirname(script_path)

# Global parameters
global_clock = str(args.clock * 10) + "Hz"  # 10x the real clock frequency (for priorities)
io_data_width = {{ parameters.IO_DATA_WIDTH }}
io_buffer_size = args.io_buffer_size
word_bitwidth = args.word_bitwidth
instr_bitwidth = {{ parameters.INSTR_DATA_WIDTH }}
instr_type_bitwidth = 1
instr_opcode_width = {{ parameters.INSTR_OPCODE_BITWIDTH }}
instr_slot_width = {{ parameters.INSTR_DATA_WIDTH - parameters.RESOURCE_INSTR_WIDTH - 1 }}
printFrequency = args.print_frequency

io_input_buffer_filepath = args.io_input_buffer_filepath
io_output_buffer_filepath = args.io_output_buffer_filepath

assembly_program_path = args.assembly_program_path

default_backing = "mfile"
default_backing_size_unit = "1MiB"
default_access_time = "0ns"
default_backing_file = ""

# Initialize input and output buffers
print("[SST SIM] - Initializing input and output buffers")
input_buffer = sst.Component("input_buffer", "drra.iobuffer")
output_buffer = sst.Component("output_buffer", "drra.iobuffer")
buffer_params = {
    "clock": global_clock,
    "io_data_width": io_data_width,
    "access_time": default_access_time,
    "printFrequency": printFrequency,
    "backing": "mfile",
}
input_buffer.addParams(buffer_params)
input_buffer_params = { "memory_file": io_input_buffer_filepath }
input_buffer.addParams(input_buffer_params)
output_buffer.addParams(buffer_params)
output_buffer_params = { "memory_file": io_output_buffer_filepath }
output_buffer.addParams(output_buffer_params)

all_cells_controllers = []
all_cells_slots = []
all_cells_slots_params = []

{% for thiscell in cells %}
# CELL {{ thiscell.coordinates.row }} {{ thiscell.coordinates.col }}
{% set r=thiscell.coordinates.row %}
{% set c=thiscell.coordinates.col %}

# List of slots in cell {{r}} {{c}}
cell_{{r}}_{{c}}_slots = []
cell_{{r}}_{{c}}_slots_params = []

# Controller: Sequencer
controller_name = "drra." + "{{ thiscell.cell.controller.kind }}"
print(f"[SST SIM] - Initializing controller {controller_name}")
seq_obj_{{r}}_{{c}} = sst.Component("seq_{{r}}_{{c}}", controller_name)
seq_obj_{{r}}_{{c}}_params = {
    "clock": global_clock,
    "printFrequency": printFrequency,
    "assembly_program_path": assembly_program_path,
    "instr_bitwidth": instr_bitwidth,
    "instr_type_bitwidth": instr_type_bitwidth,
    "instr_opcode_width": instr_opcode_width,
    "instr_slot_width": instr_slot_width,
    "io_data_width": io_data_width,
    "word_bitwidth": word_bitwidth,
    "cell_coordinates": [{{r}}, {{c}}],
    "num_slots": {{ thiscell.cell.controller.parameters.NUM_SLOTS }},
    {% for key, value in thiscell.cell.controller.parameters | items %}
    "{{ key }}": {{ value }},
    {% endfor %}
}
seq_obj_{{r}}_{{c}}.addParams(seq_obj_{{r}}_{{c}}_params)

all_cells_controllers.append(seq_obj_{{r}}_{{c}})

{% for resource in thiscell.cell.resources_list %}

# Slot {{ resource.slot }} {{ resource.kind }} (size: {{ resource.size }})
resource_name = "drra." + "{{ resource.kind }}"
print(f"[SST SIM] - Initializing resource {resource_name}")

{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}} = sst.Component("{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}", resource_name)
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_params = {
    "clock": global_clock,
    "printFrequency": printFrequency,
    "instr_bitwidth": instr_bitwidth,
    "instr_type_bitwidth": instr_type_bitwidth,
    "instr_opcode_width": instr_opcode_width,
    "instr_slot_width": instr_slot_width,
    "io_data_width": io_data_width,
    "word_bitwidth": word_bitwidth,
    "access_time": default_access_time,
    "backing": default_backing,
    "backing_size_unit": default_backing_size_unit,
    "cell_coordinates": [{{r}}, {{c}}],
    {% if resource.slot is defined %}
    "slot_id": {{ resource.slot }},
    {% endif %}
    {% if resource.parameters.FSM_PER_SLOT is defined %}
    "number_of_fsms": {{ resource.parameters.FSM_PER_SLOT }},
    {% endif %}
    {% if resource.size is defined %}
    "resource_size": {{ resource.size }},
    {% endif %}
    {% if resource.io_input is defined and resource.io_input == True %}
    "has_io_input_connection": 1,
    {% endif %}
    {% if resource.io_output is defined and resource.io_output == True %}
    "has_io_output_connection": 1,
    {% endif %}
    {% if resource.parameters.NUM_SLOTS is defined %}
    "num_slots": {{ resource.parameters.NUM_SLOTS }},
    {% endif %}
    {% if resource.parameters.RF_DEPTH is defined %}
    "register_file_size": {{ resource.parameters.RF_DEPTH }},
    {% endif %}
    {% for key, value in resource.parameters | items %}
    "{{ key }}": {{ value }},
    {% endfor %}
}
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}.addParams({{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_params)

{% if resource.io_input is defined and resource.io_input == True %}
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_input_buffer = sst.Link("link_{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_input_buffer")
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_input_buffer.connect(
    ({{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}, "io_input_port", default_access_time), (input_buffer, "col_port{{c}}", default_access_time)
)
{% endif %}
{% if resource.io_output is defined and resource.io_output == True %}
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_output_buffer = sst.Link("link_{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_output_buffer")
{{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_to_output_buffer.connect(
    ({{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}, "io_output_port", default_access_time), (output_buffer, "col_port{{c}}", default_access_time)
)
{% endif %}

cell_{{r}}_{{c}}_slots.append({{resource.kind}}_{{r}}_{{c}}_{{resource.slot}})
cell_{{r}}_{{c}}_slots_params.append({{resource.kind}}_{{r}}_{{c}}_{{resource.slot}}_params)
{% endfor %}

all_cells_slots.append(cell_{{r}}_{{c}}_slots)
all_cells_slots_params.append(cell_{{r}}_{{c}}_slots_params)
{% endfor %}

# CONNECTIONS
def get_resource_size(slot_params):
    if "resource_size" in slot_params:
        return slot_params["resource_size"]
    else:
        return 1

for cell_index, cell_slots in enumerate(all_cells_slots):
    current_cell_slots_params = all_cells_slots_params[cell_index]
    current_cell_controller = all_cells_controllers[cell_index]
    current_cell_swb = all_cells_slots[cell_index][0]
    # Slot connections
    slot_index = 0
    for index, slot in enumerate(cell_slots):
        current_params = current_cell_slots_params[index]
        # Connect sequencer to all slots
        for i in range(get_resource_size(current_params)):
            seq_link = sst.Link(f"link_seq_{cell_index}_slot{slot_index}")
            seq_link.connect(
                (current_cell_controller, f"slot_port{slot_index}", default_access_time),
                (slot, f"controller_port{i}", default_access_time),
            )
            print(
                f"[SST SIM] - Connected controller ({cell_index}) to slot {slot_index} ({slot.getType()} ({index}))"
            )

            # Connect slots to swb
            if index != 0:  # all except swb
                swb_link = sst.Link(f"link_swb_{cell_index}_slot{slot_index}")
                swb_link.connect(
                    (current_cell_swb, f"slot_port{slot_index}", default_access_time),
                    (slot, f"data_port{i}", default_access_time),
                )
                print(
                    f"[SST SIM] - Connected switchbox ({cell_index}) to slot {slot_index} ({slot.getType()} ({index}))"
                )

            slot_index += 1

# Connect cells SWB to each other
for col in range({{parameters.COLS}}):
    for row in range({{parameters.ROWS}}):
        current_swb = all_cells_slots[row * {{parameters.COLS}} + col][0]
        if col < {{parameters.COLS}} - 1:
            eastern_swb = all_cells_slots[row * {{parameters.COLS}} + col + 1][0]
            link_to_east = sst.Link(f"link_swb_{row}_{col}_to_{row}_{col+1}")
            link_to_east.connect((current_swb, "cell_port5", default_access_time), (eastern_swb, "cell_port3", default_access_time))
        if row < {{parameters.ROWS}} - 1:
            southern_swb = all_cells_slots[(row + 1) * {{parameters.COLS}} + col][0]
            link_to_south = sst.Link(f"link_swb_{row}_{col}_to_{row+1}_{col}")
            link_to_south.connect((current_swb, "cell_port7", default_access_time), (southern_swb, "cell_port1", default_access_time))
