use crate::utils::get_path_from_library;
use crate::{
    models::{
        drra::Fabric,
        pcu::Pcu,
        types::{DRRAError, ParameterList, RTLComponent},
    },
    utils::generate_hash,
};

use std::{fs, path::Path};

use serde::ser::{Serialize, SerializeMap, Serializer};

pub struct ALImp {
    name: String,
    pub pcu: Pcu,
    pub drra: Option<Fabric>,
}

impl ALImp {
    pub fn new() -> Self {
        Self {
            name: "alimp".to_string(),
            pcu: Pcu::new(),
            drra: None,
        }
    }
}

impl RTLComponent for ALImp {
    fn kind(&self) -> &str {
        "alimp"
    }
    fn name(&self) -> &str {
        &self.name
    }

    fn generate_bender(&self, output_folder: &Path) -> Result<(), DRRAError> {
        let component_path = get_path_from_library(&self.name, None).unwrap();
        let bender_filepath = Path::new(&component_path).join("Bender.yml");
        if !bender_filepath.exists() {
            panic!(
                "Bender file not found for {} (looking for {:?})",
                self.name, bender_filepath
            );
        }

        let bender_file = serde_yml::from_str::<serde_yml::Value>(
            &std::fs::read_to_string(&bender_filepath).unwrap(),
        )
        .unwrap();

        let output_bender_path = output_folder.join("Bender.yml");
        let comment =
            "# This file was automatically generated by Vesyla. DO NOT EDIT.\n\n".to_string();
        fs::write(
            output_bender_path,
            comment + &serde_yml::to_string(&bender_file).unwrap(),
        )?;

        Ok(())
    }

    fn generate_hash(&mut self) -> String {
        let mut fingerprints = Vec::new();
        let fabric = self.drra.as_mut().unwrap();

        let fingerprint = fabric.get_fingerprint();
        fingerprints.push(fingerprint);

        let params = ParameterList::new();

        generate_hash(fingerprints, &params)
    }

    fn get_fingerprint(&mut self) -> String {
        self.generate_hash()
    }
}

impl Serialize for ALImp {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut state = serializer.serialize_map(None)?;
        state.serialize_entry("pcu", &self.pcu)?;
        state.serialize_entry("drra", &self.drra)?;
        state.end()
    }
}
