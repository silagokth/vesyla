#ifndef _{{ kind | upper }}_H
#define _{{ kind | upper }}_H

#include "drra.h"
#include "dataEvent.h"

class {{ kind | capitalize }} : public DRRA{{ type | capitalize }} {
public:
  /* Element Library Info */
  SST_ELI_REGISTER_COMPONENT(
    {{ kind | capitalize }},
    "drra",
    "{{ kind }}",
    SST_ELI_ELEMENT_VERSION(1, 0, 0),
    "{{ kind | capitalize }} component",
    COMPONENT_CATEGORY_UNCATEGORIZED
  )

  /* Element Library Params */
  static std::vector<SST::ElementInfoParam> getComponentParams() {
    auto params = DRRA{{ type | capitalize }}::getBaseParams();
    {% for property in custom_properties %}
    params.push_back({"{{ property.name }}", "", "{{ param.value }}"});
    {% endfor %}
    return params;
  }
  SST_ELI_DOCUMENT_PARAMS(getComponentParams())

  /* Element Library Ports */
  static std::vector<SST::ElementInfoPort> getComponentPorts() {
    auto ports = DRRA{{ type | capitalize }}::getBasePorts();
    return ports;
  }
  SST_ELI_DOCUMENT_PORTS(getComponentPorts())

  /* Element Library Statistics */
  static std::vector<SST::ElementInfoStatistic> getComponentStatistics() {
    auto stats = DRRA{{ type | capitalize }}::getBaseStatistics();
    return stats;
  }
  SST_ELI_DOCUMENT_STATISTICS(getComponentStatistics())

  /* Constructor */
  {{ kind | capitalize }}(SST::ComponentId_t id, SST::Params &params) {};

  /* Destructor */
  ~{{ kind | capitalize }}() {};

  bool clockTick(SST::Cycle_t currentCycle) override;

private:
  // ISA
  enum OpCode {
    {% for instruction in isa.instructions %}
    {{ instruction.name | upper }} = {{ instruction.opcode }},
    {% endfor %}
  };
  {% for instruction in isa.instructions %}
  void handle{{ instruction.name | capitalize }}(uint32_t instr);
  {% endfor %}

#endif // _{{ kind | upper }}_H
