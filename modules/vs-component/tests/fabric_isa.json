{
  "__comment": "This file was automatically generated by Vesyla. DO NOT EDIT.",
  "components": [
    {
      "component_type": "controller",
      "instructions": [
        {
          "instr_type": 0,
          "name": "halt",
          "opcode": 0,
          "segments": []
        },
        {
          "instr_type": 0,
          "name": "wait",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 1,
              "comment": "Wait mode, 0 means wait for a number of cycles, 1 means wait for events.",
              "name": "mode"
            },
            {
              "bitwidth": 27,
              "comment": "If mode is 0, it means the extra cycles to wait excluding the current cycle when this wait instruction is issued. If the mode is 1, this is the 1-hot encoding of event slots.",
              "name": "cycle"
            }
          ]
        },
        {
          "instr_type": 0,
          "name": "act",
          "opcode": 2,
          "segments": [
            {
              "bitwidth": 16,
              "comment": "1-hot encoded ports that need to be activated.",
              "name": "ports"
            },
            {
              "bitwidth": 4,
              "comment": "Filter mode: [0]: Continues ports start from slot X; [1] All port X in each slot; [2]: the predefined 64-bit activation code in internal activation memory location X. (X is the filter parameter)",
              "name": "mode"
            },
            {
              "bitwidth": 8,
              "comment": "The parameter for the filter mode.",
              "name": "param"
            }
          ]
        },
        {
          "instr_type": 0,
          "name": "calc",
          "opcode": 3,
          "segments": [
            {
              "bitwidth": 6,
              "comment": "Calculation mode",
              "name": "mode",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "idle"
                },
                {
                  "key": 1,
                  "val": "add"
                },
                {
                  "key": 2,
                  "val": "sub"
                },
                {
                  "key": 3,
                  "val": "lls"
                },
                {
                  "key": 4,
                  "val": "lrs"
                },
                {
                  "key": 5,
                  "val": "mul"
                },
                {
                  "key": 6,
                  "val": "div"
                },
                {
                  "key": 7,
                  "val": "mod"
                },
                {
                  "key": 8,
                  "val": "bitand"
                },
                {
                  "key": 9,
                  "val": "bitor"
                },
                {
                  "key": 10,
                  "val": "bitinv"
                },
                {
                  "key": 11,
                  "val": "bitxor"
                },
                {
                  "key": 17,
                  "val": "eq"
                },
                {
                  "key": 18,
                  "val": "ne"
                },
                {
                  "key": 19,
                  "val": "gt"
                },
                {
                  "key": 20,
                  "val": "ge"
                },
                {
                  "key": 21,
                  "val": "lt"
                },
                {
                  "key": 22,
                  "val": "le"
                },
                {
                  "key": 32,
                  "val": "and"
                },
                {
                  "key": 33,
                  "val": "or"
                },
                {
                  "key": 34,
                  "val": "not"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "First operand.",
              "name": "operand1"
            },
            {
              "bitwidth": 1,
              "comment": "Is the second operand static or dynamic?",
              "name": "operand2_sd",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "s"
                },
                {
                  "key": 1,
                  "val": "d"
                }
              ]
            },
            {
              "bitwidth": 8,
              "comment": "Second operand.",
              "name": "operand2"
            },
            {
              "bitwidth": 4,
              "comment": "The register to store the result. It could be the scalar register or flag register, depending on the calculation mode.",
              "name": "result"
            }
          ]
        },
        {
          "instr_type": 0,
          "name": "brn",
          "opcode": 4,
          "segments": [
            {
              "bitwidth": 4,
              "comment": "The flag register",
              "name": "reg"
            },
            {
              "bitwidth": 9,
              "comment": "The PC to jump to in case the condition is true. The PC is relative to the current PC.",
              "is_signed": true,
              "name": "target_true"
            },
            {
              "bitwidth": 9,
              "comment": "The PC to jump to in case the condition is false. The PC is relative to the current PC.",
              "is_signed": true,
              "name": "target_false"
            }
          ]
        }
      ],
      "kind": "sequencer"
    },
    {
      "component_type": "resource",
      "instructions": [
        {
          "instr_type": 1,
          "name": "swb",
          "opcode": 4,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "configuration option",
              "name": "option"
            },
            {
              "bitwidth": 4,
              "comment": "Bus channel. Note: if the SWB is implemented by a crossbar, the channel is always equals to the target slot.",
              "name": "channel"
            },
            {
              "bitwidth": 4,
              "comment": "Source slot.",
              "name": "source"
            },
            {
              "bitwidth": 4,
              "comment": "Target slot.",
              "name": "target"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "route",
          "opcode": 5,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "configuration option",
              "name": "option"
            },
            {
              "bitwidth": 1,
              "comment": "Send or receive.",
              "name": "sr",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "s"
                },
                {
                  "key": 1,
                  "val": "r"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "If it's on sending side, it indicates the slot number; if it's on receiving side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE. (Binary encoded)",
              "name": "source"
            },
            {
              "bitwidth": 16,
              "comment": "If it's on sending side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE; if it's on receiving side, it indicates the slot number. (1-hot encoded)",
              "name": "target"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "rep",
          "opcode": 0,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "read narrow"
                },
                {
                  "key": 1,
                  "val": "read wide"
                },
                {
                  "key": 2,
                  "val": "write narrow"
                },
                {
                  "key": 3,
                  "val": "write wide"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "repx",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "read narrow"
                },
                {
                  "key": 1,
                  "val": "read wide"
                },
                {
                  "key": 2,
                  "val": "write narrow"
                },
                {
                  "key": 3,
                  "val": "write wide"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "fsm",
          "opcode": 2,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 0 and 1.",
              "name": "delay_0"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 1 and 2.",
              "name": "delay_1"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 2 and 3.",
              "name": "delay_2"
            }
          ]
        }
      ],
      "kind": "swb"
    },
    {
      "component_type": "resource",
      "instructions": [
        {
          "instr_type": 1,
          "name": "dsu",
          "opcode": 6,
          "segments": [
            {
              "bitwidth": 1,
              "comment": "Is initial address static or dynamic?",
              "name": "init_addr_sd",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "s"
                },
                {
                  "key": 1,
                  "val": "d"
                }
              ]
            },
            {
              "bitwidth": 16,
              "comment": "Initial address",
              "name": "init_addr"
            },
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "rep",
          "opcode": 0,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "repx",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        }
      ],
      "kind": "iosram_top"
    },
    {
      "component_type": "resource",
      "instructions": [
        {
          "instr_type": 1,
          "name": "dsu",
          "opcode": 6,
          "segments": [
            {
              "bitwidth": 1,
              "comment": "Is initial address static or dynamic?",
              "name": "init_addr_sd",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "s"
                },
                {
                  "key": 1,
                  "val": "d"
                }
              ]
            },
            {
              "bitwidth": 16,
              "comment": "Initial address",
              "name": "init_addr"
            },
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "Write to RF (WORD)"
                },
                {
                  "key": 1,
                  "val": "Read from RF (WORD)"
                },
                {
                  "key": 2,
                  "val": "Write to RF (BULK)"
                },
                {
                  "key": 3,
                  "val": "Read from RF (BULK)"
                }
              ]
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "rep",
          "opcode": 0,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "Write to RF (WORD)"
                },
                {
                  "key": 1,
                  "val": "Read from RF (WORD)"
                },
                {
                  "key": 2,
                  "val": "Write to RF (BULK)"
                },
                {
                  "key": 3,
                  "val": "Read from RF (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "repx",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "Write to RF (WORD)"
                },
                {
                  "key": 1,
                  "val": "Read from RF (WORD)"
                },
                {
                  "key": 2,
                  "val": "Write to RF (BULK)"
                },
                {
                  "key": 3,
                  "val": "Read from RF (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        }
      ],
      "kind": "rf"
    },
    {
      "component_type": "resource",
      "instructions": [
        {
          "instr_type": 1,
          "name": "dpu",
          "opcode": 3,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "Configuration option.",
              "name": "option"
            },
            {
              "bitwidth": 5,
              "comment": "The DPU mode. ",
              "name": "mode",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "idle"
                },
                {
                  "key": 1,
                  "val": "add"
                },
                {
                  "key": 2,
                  "val": "sum_acc"
                },
                {
                  "key": 3,
                  "val": "add_const"
                },
                {
                  "key": 4,
                  "val": "subt"
                },
                {
                  "key": 5,
                  "val": "subt_abs"
                },
                {
                  "key": 6,
                  "val": "mode_6"
                },
                {
                  "key": 7,
                  "val": "mult"
                },
                {
                  "key": 8,
                  "val": "mult_add"
                },
                {
                  "key": 9,
                  "val": "mult_const"
                },
                {
                  "key": 10,
                  "val": "mac"
                },
                {
                  "key": 11,
                  "val": "ld_ir"
                },
                {
                  "key": 12,
                  "val": "axpy"
                },
                {
                  "key": 13,
                  "val": "max_min_acc"
                },
                {
                  "key": 14,
                  "val": "max_min_const"
                },
                {
                  "key": 15,
                  "val": "mode_15"
                },
                {
                  "key": 16,
                  "val": "max_min"
                },
                {
                  "key": 17,
                  "val": "shift_l"
                },
                {
                  "key": 18,
                  "val": "shift_r"
                },
                {
                  "key": 19,
                  "val": "sigm"
                },
                {
                  "key": 20,
                  "val": "tanhyp"
                },
                {
                  "key": 21,
                  "val": "expon"
                },
                {
                  "key": 22,
                  "val": "lk_relu"
                },
                {
                  "key": 23,
                  "val": "relu"
                },
                {
                  "key": 24,
                  "val": "div"
                },
                {
                  "key": 25,
                  "val": "acc_softmax"
                },
                {
                  "key": 26,
                  "val": "div_softmax"
                },
                {
                  "key": 27,
                  "val": "ld_acc"
                },
                {
                  "key": 28,
                  "val": "scale_dw"
                },
                {
                  "key": 29,
                  "val": "scale_up"
                },
                {
                  "key": 30,
                  "val": "mac_inter"
                },
                {
                  "key": 31,
                  "val": "mode_31"
                }
              ]
            },
            {
              "bitwidth": 16,
              "comment": "The immediate field used by some DPU modes.",
              "name": "immediate"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "rep",
          "opcode": 0,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "read narrow"
                },
                {
                  "key": 1,
                  "val": "read wide"
                },
                {
                  "key": 2,
                  "val": "write narrow"
                },
                {
                  "key": 3,
                  "val": "write wide"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "repx",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "read narrow"
                },
                {
                  "key": 1,
                  "val": "read wide"
                },
                {
                  "key": 2,
                  "val": "write narrow"
                },
                {
                  "key": 3,
                  "val": "write wide"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "fsm",
          "opcode": 2,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 0 and 1.",
              "name": "delay_0"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 1 and 2.",
              "name": "delay_1"
            },
            {
              "bitwidth": 7,
              "comment": "Delay between state 2 and 3.",
              "name": "delay_2"
            }
          ]
        }
      ],
      "kind": "dpu"
    },
    {
      "component_type": "resource",
      "instructions": [
        {
          "instr_type": 1,
          "name": "dsu",
          "opcode": 6,
          "segments": [
            {
              "bitwidth": 1,
              "comment": "Is initial address static or dynamic?",
              "name": "init_addr_sd",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "s"
                },
                {
                  "key": 1,
                  "val": "d"
                }
              ]
            },
            {
              "bitwidth": 16,
              "comment": "Initial address",
              "name": "init_addr"
            },
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "rep",
          "opcode": 0,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        },
        {
          "instr_type": 1,
          "name": "repx",
          "opcode": 1,
          "segments": [
            {
              "bitwidth": 2,
              "comment": "The port number",
              "name": "port",
              "verbo_map": [
                {
                  "key": 0,
                  "val": "address generation for input buffer"
                },
                {
                  "key": 1,
                  "val": "address generation for output buffer"
                },
                {
                  "key": 2,
                  "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                },
                {
                  "key": 3,
                  "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                }
              ]
            },
            {
              "bitwidth": 4,
              "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
              "name": "level"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 iteration - 1.",
              "name": "iter"
            },
            {
              "bitwidth": 6,
              "comment": "level-1 step",
              "default_val": 1,
              "is_signed": true,
              "name": "step"
            },
            {
              "bitwidth": 6,
              "comment": "delay",
              "name": "delay"
            }
          ]
        }
      ],
      "kind": "iosram_btm"
    }
  ],
  "format": {
    "instr_bitwidth": 32,
    "instr_opcode_bitwidth": 3,
    "instr_slot_bitwidth": 4,
    "instr_type_bitwidth": 1
  }
}