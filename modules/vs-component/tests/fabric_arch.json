{
  "__comment": "This file was automatically generated by Vesyla. DO NOT EDIT.",
  "cells": [
    {
      "coordinates": {
        "row": 0,
        "col": 0
      },
      "cell": {
        "name": "cell_top_impl",
        "fingerprint": "_wd4bmxzzxrs",
        "already_defined": false,
        "kind": "cell_top",
        "parameters": {
          "BULK_BITWIDTH": 256,
          "FSM_PER_SLOT": 4,
          "INSTR_ADDR_WIDTH": 6,
          "INSTR_DATA_WIDTH": 32,
          "INSTR_HOPS_WIDTH": 4,
          "IO_ADDR_WIDTH": 16,
          "IO_DATA_WIDTH": 256,
          "NUM_SLOTS": 16,
          "RESOURCE_INSTR_WIDTH": 27,
          "WORD_BITWIDTH": 16
        },
        "controller": {
          "name": "sequencer_impl",
          "fingerprint": "_bofiw7zs7vj",
          "already_defined": false,
          "kind": "sequencer",
          "size": 16,
          "io_input": false,
          "io_output": false,
          "component_type": "controller",
          "parameters": {
            "FSM_PER_SLOT": 4,
            "INSTR_ADDR_WIDTH": 6,
            "INSTR_DATA_WIDTH": 32,
            "INSTR_HOPS_WIDTH": 4,
            "NUM_SLOTS": 16,
            "RESOURCE_INSTR_WIDTH": 27
          },
          "isa": {
            "format": {
              "instr_bitwidth": 32,
              "instr_type_bitwidth": 1,
              "instr_opcode_bitwidth": 3,
              "instr_slot_bitwidth": 4
            },
            "instructions": [
              {
                "name": "halt",
                "opcode": 0,
                "instr_type": 0,
                "segments": []
              },
              {
                "name": "wait",
                "opcode": 1,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Wait mode, 0 means wait for a number of cycles, 1 means wait for events.",
                    "bitwidth": 1
                  },
                  {
                    "name": "cycle",
                    "comment": "If mode is 0, it means the extra cycles to wait excluding the current cycle when this wait instruction is issued. If the mode is 1, this is the 1-hot encoding of event slots.",
                    "bitwidth": 27
                  }
                ]
              },
              {
                "name": "act",
                "opcode": 2,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "ports",
                    "comment": "1-hot encoded ports that need to be activated.",
                    "bitwidth": 16
                  },
                  {
                    "name": "mode",
                    "comment": "Filter mode: [0]: Continues ports start from slot X; [1] All port X in each slot; [2]: the predefined 64-bit activation code in internal activation memory location X. (X is the filter parameter)",
                    "bitwidth": 4
                  },
                  {
                    "name": "param",
                    "comment": "The parameter for the filter mode.",
                    "bitwidth": 8
                  }
                ]
              },
              {
                "name": "calc",
                "opcode": 3,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Calculation mode",
                    "bitwidth": 6,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "idle"
                      },
                      {
                        "key": 1,
                        "val": "add"
                      },
                      {
                        "key": 2,
                        "val": "sub"
                      },
                      {
                        "key": 3,
                        "val": "lls"
                      },
                      {
                        "key": 4,
                        "val": "lrs"
                      },
                      {
                        "key": 5,
                        "val": "mul"
                      },
                      {
                        "key": 6,
                        "val": "div"
                      },
                      {
                        "key": 7,
                        "val": "mod"
                      },
                      {
                        "key": 8,
                        "val": "bitand"
                      },
                      {
                        "key": 9,
                        "val": "bitor"
                      },
                      {
                        "key": 10,
                        "val": "bitinv"
                      },
                      {
                        "key": 11,
                        "val": "bitxor"
                      },
                      {
                        "key": 17,
                        "val": "eq"
                      },
                      {
                        "key": 18,
                        "val": "ne"
                      },
                      {
                        "key": 19,
                        "val": "gt"
                      },
                      {
                        "key": 20,
                        "val": "ge"
                      },
                      {
                        "key": 21,
                        "val": "lt"
                      },
                      {
                        "key": 22,
                        "val": "le"
                      },
                      {
                        "key": 32,
                        "val": "and"
                      },
                      {
                        "key": 33,
                        "val": "or"
                      },
                      {
                        "key": 34,
                        "val": "not"
                      }
                    ]
                  },
                  {
                    "name": "operand1",
                    "comment": "First operand.",
                    "bitwidth": 4
                  },
                  {
                    "name": "operand2_sd",
                    "comment": "Is the second operand static or dynamic?",
                    "bitwidth": 1,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "s"
                      },
                      {
                        "key": 1,
                        "val": "d"
                      }
                    ]
                  },
                  {
                    "name": "operand2",
                    "comment": "Second operand.",
                    "bitwidth": 8
                  },
                  {
                    "name": "result",
                    "comment": "The register to store the result. It could be the scalar register or flag register, depending on the calculation mode.",
                    "bitwidth": 4
                  }
                ]
              },
              {
                "name": "brn",
                "opcode": 4,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "reg",
                    "comment": "The flag register",
                    "bitwidth": 4
                  },
                  {
                    "name": "target_true",
                    "comment": "The PC to jump to in case the condition is true. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  },
                  {
                    "name": "target_false",
                    "comment": "The PC to jump to in case the condition is false. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  }
                ]
              }
            ]
          }
        },
        "resources_list": [
          {
            "name": "swb_impl",
            "fingerprint": "_kmcyy4g8mbb",
            "already_defined": false,
            "kind": "swb",
            "slot": 0,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "swb",
                  "opcode": 4,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "channel",
                      "comment": "Bus channel. Note: if the SWB is implemented by a crossbar, the channel is always equals to the target slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "source",
                      "comment": "Source slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "Target slot.",
                      "bitwidth": 4
                    }
                  ]
                },
                {
                  "name": "route",
                  "opcode": 5,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "sr",
                      "comment": "Send or receive.",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "r"
                        }
                      ]
                    },
                    {
                      "name": "source",
                      "comment": "If it's on sending side, it indicates the slot number; if it's on receiving side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE. (Binary encoded)",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "If it's on sending side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE; if it's on receiving side, it indicates the slot number. (1-hot encoded)",
                      "bitwidth": 16
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "fsm",
                  "opcode": 2,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2
                    },
                    {
                      "name": "delay_0",
                      "comment": "Delay between state 0 and 1.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_1",
                      "comment": "Delay between state 1 and 2.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_2",
                      "comment": "Delay between state 2 and 3.",
                      "bitwidth": 7
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "iosram_top_impl",
            "fingerprint": "_fuznrwegsgm",
            "already_defined": false,
            "kind": "iosram_top",
            "slot": 1,
            "size": 4,
            "io_input": true,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "SRAM_ADDR_WIDTH": 6,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dsu",
                  "opcode": 6,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "init_addr_sd",
                      "comment": "Is initial address static or dynamic?",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "d"
                        }
                      ]
                    },
                    {
                      "name": "init_addr",
                      "comment": "Initial address",
                      "bitwidth": 16
                    },
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                }
              ]
            }
          }
        ],
        "isa": {
          "format": {
            "instr_bitwidth": 32,
            "instr_type_bitwidth": 1,
            "instr_opcode_bitwidth": 3,
            "instr_slot_bitwidth": 4
          },
          "instructions": []
        },
        "fingerprint_table": {
          "swb_impl": "_kmcyy4g8mbb",
          "sequencer_impl": "_bofiw7zs7vj",
          "iosram_top_impl": "_fuznrwegsgm"
        }
      }
    },
    {
      "coordinates": {
        "row": 1,
        "col": 0
      },
      "cell": {
        "name": "cell_mid_impl",
        "fingerprint": "_jz3bdsce94z",
        "already_defined": false,
        "kind": "cell_mid",
        "parameters": {
          "BULK_BITWIDTH": 256,
          "FSM_PER_SLOT": 4,
          "INSTR_ADDR_WIDTH": 6,
          "INSTR_DATA_WIDTH": 32,
          "INSTR_HOPS_WIDTH": 4,
          "IO_ADDR_WIDTH": 16,
          "IO_DATA_WIDTH": 256,
          "NUM_SLOTS": 16,
          "RESOURCE_INSTR_WIDTH": 27,
          "WORD_BITWIDTH": 16
        },
        "controller": {
          "name": "sequencer_impl",
          "fingerprint": "_bofiw7zs7vj",
          "already_defined": true,
          "kind": "sequencer",
          "size": 16,
          "io_input": false,
          "io_output": false,
          "component_type": "controller",
          "parameters": {
            "FSM_PER_SLOT": 4,
            "INSTR_ADDR_WIDTH": 6,
            "INSTR_DATA_WIDTH": 32,
            "INSTR_HOPS_WIDTH": 4,
            "NUM_SLOTS": 16,
            "RESOURCE_INSTR_WIDTH": 27
          },
          "isa": {
            "format": {
              "instr_bitwidth": 32,
              "instr_type_bitwidth": 1,
              "instr_opcode_bitwidth": 3,
              "instr_slot_bitwidth": 4
            },
            "instructions": [
              {
                "name": "halt",
                "opcode": 0,
                "instr_type": 0,
                "segments": []
              },
              {
                "name": "wait",
                "opcode": 1,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Wait mode, 0 means wait for a number of cycles, 1 means wait for events.",
                    "bitwidth": 1
                  },
                  {
                    "name": "cycle",
                    "comment": "If mode is 0, it means the extra cycles to wait excluding the current cycle when this wait instruction is issued. If the mode is 1, this is the 1-hot encoding of event slots.",
                    "bitwidth": 27
                  }
                ]
              },
              {
                "name": "act",
                "opcode": 2,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "ports",
                    "comment": "1-hot encoded ports that need to be activated.",
                    "bitwidth": 16
                  },
                  {
                    "name": "mode",
                    "comment": "Filter mode: [0]: Continues ports start from slot X; [1] All port X in each slot; [2]: the predefined 64-bit activation code in internal activation memory location X. (X is the filter parameter)",
                    "bitwidth": 4
                  },
                  {
                    "name": "param",
                    "comment": "The parameter for the filter mode.",
                    "bitwidth": 8
                  }
                ]
              },
              {
                "name": "calc",
                "opcode": 3,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Calculation mode",
                    "bitwidth": 6,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "idle"
                      },
                      {
                        "key": 1,
                        "val": "add"
                      },
                      {
                        "key": 2,
                        "val": "sub"
                      },
                      {
                        "key": 3,
                        "val": "lls"
                      },
                      {
                        "key": 4,
                        "val": "lrs"
                      },
                      {
                        "key": 5,
                        "val": "mul"
                      },
                      {
                        "key": 6,
                        "val": "div"
                      },
                      {
                        "key": 7,
                        "val": "mod"
                      },
                      {
                        "key": 8,
                        "val": "bitand"
                      },
                      {
                        "key": 9,
                        "val": "bitor"
                      },
                      {
                        "key": 10,
                        "val": "bitinv"
                      },
                      {
                        "key": 11,
                        "val": "bitxor"
                      },
                      {
                        "key": 17,
                        "val": "eq"
                      },
                      {
                        "key": 18,
                        "val": "ne"
                      },
                      {
                        "key": 19,
                        "val": "gt"
                      },
                      {
                        "key": 20,
                        "val": "ge"
                      },
                      {
                        "key": 21,
                        "val": "lt"
                      },
                      {
                        "key": 22,
                        "val": "le"
                      },
                      {
                        "key": 32,
                        "val": "and"
                      },
                      {
                        "key": 33,
                        "val": "or"
                      },
                      {
                        "key": 34,
                        "val": "not"
                      }
                    ]
                  },
                  {
                    "name": "operand1",
                    "comment": "First operand.",
                    "bitwidth": 4
                  },
                  {
                    "name": "operand2_sd",
                    "comment": "Is the second operand static or dynamic?",
                    "bitwidth": 1,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "s"
                      },
                      {
                        "key": 1,
                        "val": "d"
                      }
                    ]
                  },
                  {
                    "name": "operand2",
                    "comment": "Second operand.",
                    "bitwidth": 8
                  },
                  {
                    "name": "result",
                    "comment": "The register to store the result. It could be the scalar register or flag register, depending on the calculation mode.",
                    "bitwidth": 4
                  }
                ]
              },
              {
                "name": "brn",
                "opcode": 4,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "reg",
                    "comment": "The flag register",
                    "bitwidth": 4
                  },
                  {
                    "name": "target_true",
                    "comment": "The PC to jump to in case the condition is true. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  },
                  {
                    "name": "target_false",
                    "comment": "The PC to jump to in case the condition is false. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  }
                ]
              }
            ]
          }
        },
        "resources_list": [
          {
            "name": "swb_impl",
            "fingerprint": "_kmcyy4g8mbb",
            "already_defined": true,
            "kind": "swb",
            "slot": 0,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "swb",
                  "opcode": 4,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "channel",
                      "comment": "Bus channel. Note: if the SWB is implemented by a crossbar, the channel is always equals to the target slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "source",
                      "comment": "Source slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "Target slot.",
                      "bitwidth": 4
                    }
                  ]
                },
                {
                  "name": "route",
                  "opcode": 5,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "sr",
                      "comment": "Send or receive.",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "r"
                        }
                      ]
                    },
                    {
                      "name": "source",
                      "comment": "If it's on sending side, it indicates the slot number; if it's on receiving side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE. (Binary encoded)",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "If it's on sending side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE; if it's on receiving side, it indicates the slot number. (1-hot encoded)",
                      "bitwidth": 16
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "fsm",
                  "opcode": 2,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2
                    },
                    {
                      "name": "delay_0",
                      "comment": "Delay between state 0 and 1.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_1",
                      "comment": "Delay between state 1 and 2.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_2",
                      "comment": "Delay between state 2 and 3.",
                      "bitwidth": 7
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "rf_impl",
            "fingerprint": "_dyqn9udjnhi",
            "already_defined": false,
            "kind": "rf",
            "slot": 1,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_ADDR_WIDTH": 2,
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "RF_DEPTH": 64,
              "WORD_ADDR_WIDTH": 6,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dsu",
                  "opcode": 6,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "init_addr_sd",
                      "comment": "Is initial address static or dynamic?",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "d"
                        }
                      ]
                    },
                    {
                      "name": "init_addr",
                      "comment": "Initial address",
                      "bitwidth": 16
                    },
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "rf_impl",
            "fingerprint": "_dyqn9udjnhi",
            "already_defined": true,
            "kind": "rf",
            "slot": 2,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_ADDR_WIDTH": 2,
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "RF_DEPTH": 64,
              "WORD_ADDR_WIDTH": 6,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dsu",
                  "opcode": 6,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "init_addr_sd",
                      "comment": "Is initial address static or dynamic?",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "d"
                        }
                      ]
                    },
                    {
                      "name": "init_addr",
                      "comment": "Initial address",
                      "bitwidth": 16
                    },
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "rf_impl",
            "fingerprint": "_dyqn9udjnhi",
            "already_defined": true,
            "kind": "rf",
            "slot": 3,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_ADDR_WIDTH": 2,
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "RF_DEPTH": 64,
              "WORD_ADDR_WIDTH": 6,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dsu",
                  "opcode": 6,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "init_addr_sd",
                      "comment": "Is initial address static or dynamic?",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "d"
                        }
                      ]
                    },
                    {
                      "name": "init_addr",
                      "comment": "Initial address",
                      "bitwidth": 16
                    },
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "Write to RF (WORD)"
                        },
                        {
                          "key": 1,
                          "val": "Read from RF (WORD)"
                        },
                        {
                          "key": 2,
                          "val": "Write to RF (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "Read from RF (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "dpu_impl",
            "fingerprint": "_pnkjyubmn1c",
            "already_defined": false,
            "kind": "dpu",
            "slot": 4,
            "size": 2,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dpu",
                  "opcode": 3,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "Configuration option.",
                      "bitwidth": 2
                    },
                    {
                      "name": "mode",
                      "comment": "The DPU mode. ",
                      "bitwidth": 5,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "idle"
                        },
                        {
                          "key": 1,
                          "val": "add"
                        },
                        {
                          "key": 2,
                          "val": "sum_acc"
                        },
                        {
                          "key": 3,
                          "val": "add_const"
                        },
                        {
                          "key": 4,
                          "val": "subt"
                        },
                        {
                          "key": 5,
                          "val": "subt_abs"
                        },
                        {
                          "key": 6,
                          "val": "mode_6"
                        },
                        {
                          "key": 7,
                          "val": "mult"
                        },
                        {
                          "key": 8,
                          "val": "mult_add"
                        },
                        {
                          "key": 9,
                          "val": "mult_const"
                        },
                        {
                          "key": 10,
                          "val": "mac"
                        },
                        {
                          "key": 11,
                          "val": "ld_ir"
                        },
                        {
                          "key": 12,
                          "val": "axpy"
                        },
                        {
                          "key": 13,
                          "val": "max_min_acc"
                        },
                        {
                          "key": 14,
                          "val": "max_min_const"
                        },
                        {
                          "key": 15,
                          "val": "mode_15"
                        },
                        {
                          "key": 16,
                          "val": "max_min"
                        },
                        {
                          "key": 17,
                          "val": "shift_l"
                        },
                        {
                          "key": 18,
                          "val": "shift_r"
                        },
                        {
                          "key": 19,
                          "val": "sigm"
                        },
                        {
                          "key": 20,
                          "val": "tanhyp"
                        },
                        {
                          "key": 21,
                          "val": "expon"
                        },
                        {
                          "key": 22,
                          "val": "lk_relu"
                        },
                        {
                          "key": 23,
                          "val": "relu"
                        },
                        {
                          "key": 24,
                          "val": "div"
                        },
                        {
                          "key": 25,
                          "val": "acc_softmax"
                        },
                        {
                          "key": 26,
                          "val": "div_softmax"
                        },
                        {
                          "key": 27,
                          "val": "ld_acc"
                        },
                        {
                          "key": 28,
                          "val": "scale_dw"
                        },
                        {
                          "key": 29,
                          "val": "scale_up"
                        },
                        {
                          "key": 30,
                          "val": "mac_inter"
                        },
                        {
                          "key": 31,
                          "val": "mode_31"
                        }
                      ]
                    },
                    {
                      "name": "immediate",
                      "comment": "The immediate field used by some DPU modes.",
                      "bitwidth": 16
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "fsm",
                  "opcode": 2,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2
                    },
                    {
                      "name": "delay_0",
                      "comment": "Delay between state 0 and 1.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_1",
                      "comment": "Delay between state 1 and 2.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_2",
                      "comment": "Delay between state 2 and 3.",
                      "bitwidth": 7
                    }
                  ]
                }
              ]
            }
          }
        ],
        "isa": {
          "format": {
            "instr_bitwidth": 32,
            "instr_type_bitwidth": 1,
            "instr_opcode_bitwidth": 3,
            "instr_slot_bitwidth": 4
          },
          "instructions": []
        },
        "fingerprint_table": {
          "sequencer_impl": "_bofiw7zs7vj",
          "rf_impl": "_dyqn9udjnhi",
          "swb_impl": "_kmcyy4g8mbb",
          "dpu_impl": "_pnkjyubmn1c"
        }
      }
    },
    {
      "coordinates": {
        "row": 2,
        "col": 0
      },
      "cell": {
        "name": "cell_btm_impl",
        "fingerprint": "_utrqvpzgeyt",
        "already_defined": false,
        "kind": "cell_btm",
        "parameters": {
          "BULK_BITWIDTH": 256,
          "FSM_PER_SLOT": 4,
          "INSTR_ADDR_WIDTH": 6,
          "INSTR_DATA_WIDTH": 32,
          "INSTR_HOPS_WIDTH": 4,
          "IO_ADDR_WIDTH": 16,
          "IO_DATA_WIDTH": 256,
          "NUM_SLOTS": 16,
          "RESOURCE_INSTR_WIDTH": 27,
          "WORD_BITWIDTH": 16
        },
        "controller": {
          "name": "sequencer_impl",
          "fingerprint": "_bofiw7zs7vj",
          "already_defined": true,
          "kind": "sequencer",
          "size": 16,
          "io_input": false,
          "io_output": false,
          "component_type": "controller",
          "parameters": {
            "FSM_PER_SLOT": 4,
            "INSTR_ADDR_WIDTH": 6,
            "INSTR_DATA_WIDTH": 32,
            "INSTR_HOPS_WIDTH": 4,
            "NUM_SLOTS": 16,
            "RESOURCE_INSTR_WIDTH": 27
          },
          "isa": {
            "format": {
              "instr_bitwidth": 32,
              "instr_type_bitwidth": 1,
              "instr_opcode_bitwidth": 3,
              "instr_slot_bitwidth": 4
            },
            "instructions": [
              {
                "name": "halt",
                "opcode": 0,
                "instr_type": 0,
                "segments": []
              },
              {
                "name": "wait",
                "opcode": 1,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Wait mode, 0 means wait for a number of cycles, 1 means wait for events.",
                    "bitwidth": 1
                  },
                  {
                    "name": "cycle",
                    "comment": "If mode is 0, it means the extra cycles to wait excluding the current cycle when this wait instruction is issued. If the mode is 1, this is the 1-hot encoding of event slots.",
                    "bitwidth": 27
                  }
                ]
              },
              {
                "name": "act",
                "opcode": 2,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "ports",
                    "comment": "1-hot encoded ports that need to be activated.",
                    "bitwidth": 16
                  },
                  {
                    "name": "mode",
                    "comment": "Filter mode: [0]: Continues ports start from slot X; [1] All port X in each slot; [2]: the predefined 64-bit activation code in internal activation memory location X. (X is the filter parameter)",
                    "bitwidth": 4
                  },
                  {
                    "name": "param",
                    "comment": "The parameter for the filter mode.",
                    "bitwidth": 8
                  }
                ]
              },
              {
                "name": "calc",
                "opcode": 3,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "mode",
                    "comment": "Calculation mode",
                    "bitwidth": 6,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "idle"
                      },
                      {
                        "key": 1,
                        "val": "add"
                      },
                      {
                        "key": 2,
                        "val": "sub"
                      },
                      {
                        "key": 3,
                        "val": "lls"
                      },
                      {
                        "key": 4,
                        "val": "lrs"
                      },
                      {
                        "key": 5,
                        "val": "mul"
                      },
                      {
                        "key": 6,
                        "val": "div"
                      },
                      {
                        "key": 7,
                        "val": "mod"
                      },
                      {
                        "key": 8,
                        "val": "bitand"
                      },
                      {
                        "key": 9,
                        "val": "bitor"
                      },
                      {
                        "key": 10,
                        "val": "bitinv"
                      },
                      {
                        "key": 11,
                        "val": "bitxor"
                      },
                      {
                        "key": 17,
                        "val": "eq"
                      },
                      {
                        "key": 18,
                        "val": "ne"
                      },
                      {
                        "key": 19,
                        "val": "gt"
                      },
                      {
                        "key": 20,
                        "val": "ge"
                      },
                      {
                        "key": 21,
                        "val": "lt"
                      },
                      {
                        "key": 22,
                        "val": "le"
                      },
                      {
                        "key": 32,
                        "val": "and"
                      },
                      {
                        "key": 33,
                        "val": "or"
                      },
                      {
                        "key": 34,
                        "val": "not"
                      }
                    ]
                  },
                  {
                    "name": "operand1",
                    "comment": "First operand.",
                    "bitwidth": 4
                  },
                  {
                    "name": "operand2_sd",
                    "comment": "Is the second operand static or dynamic?",
                    "bitwidth": 1,
                    "verbo_map": [
                      {
                        "key": 0,
                        "val": "s"
                      },
                      {
                        "key": 1,
                        "val": "d"
                      }
                    ]
                  },
                  {
                    "name": "operand2",
                    "comment": "Second operand.",
                    "bitwidth": 8
                  },
                  {
                    "name": "result",
                    "comment": "The register to store the result. It could be the scalar register or flag register, depending on the calculation mode.",
                    "bitwidth": 4
                  }
                ]
              },
              {
                "name": "brn",
                "opcode": 4,
                "instr_type": 0,
                "segments": [
                  {
                    "name": "reg",
                    "comment": "The flag register",
                    "bitwidth": 4
                  },
                  {
                    "name": "target_true",
                    "comment": "The PC to jump to in case the condition is true. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  },
                  {
                    "name": "target_false",
                    "comment": "The PC to jump to in case the condition is false. The PC is relative to the current PC.",
                    "bitwidth": 9,
                    "is_signed": true
                  }
                ]
              }
            ]
          }
        },
        "resources_list": [
          {
            "name": "swb_impl",
            "fingerprint": "_kmcyy4g8mbb",
            "already_defined": true,
            "kind": "swb",
            "slot": 0,
            "size": 1,
            "io_input": false,
            "io_output": false,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "swb",
                  "opcode": 4,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "channel",
                      "comment": "Bus channel. Note: if the SWB is implemented by a crossbar, the channel is always equals to the target slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "source",
                      "comment": "Source slot.",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "Target slot.",
                      "bitwidth": 4
                    }
                  ]
                },
                {
                  "name": "route",
                  "opcode": 5,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "option",
                      "comment": "configuration option",
                      "bitwidth": 2
                    },
                    {
                      "name": "sr",
                      "comment": "Send or receive.",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "r"
                        }
                      ]
                    },
                    {
                      "name": "source",
                      "comment": "If it's on sending side, it indicates the slot number; if it's on receiving side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE. (Binary encoded)",
                      "bitwidth": 4
                    },
                    {
                      "name": "target",
                      "comment": "If it's on sending side, it's encoded direction NW/N/NE/W/C/E/SW/S/SE; if it's on receiving side, it indicates the slot number. (1-hot encoded)",
                      "bitwidth": 16
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "read narrow"
                        },
                        {
                          "key": 1,
                          "val": "read wide"
                        },
                        {
                          "key": 2,
                          "val": "write narrow"
                        },
                        {
                          "key": 3,
                          "val": "write wide"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "fsm",
                  "opcode": 2,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2
                    },
                    {
                      "name": "delay_0",
                      "comment": "Delay between state 0 and 1.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_1",
                      "comment": "Delay between state 1 and 2.",
                      "bitwidth": 7
                    },
                    {
                      "name": "delay_2",
                      "comment": "Delay between state 2 and 3.",
                      "bitwidth": 7
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "iosram_btm_impl",
            "fingerprint": "_auoccatktx4",
            "already_defined": false,
            "kind": "iosram_btm",
            "slot": 1,
            "size": 4,
            "io_input": false,
            "io_output": true,
            "component_type": "resource",
            "parameters": {
              "BULK_BITWIDTH": 256,
              "FSM_PER_SLOT": 4,
              "INSTR_OPCODE_BITWIDTH": 3,
              "IO_ADDR_WIDTH": 16,
              "IO_DATA_WIDTH": 256,
              "NUM_SLOTS": 16,
              "RESOURCE_INSTR_WIDTH": 27,
              "SRAM_ADDR_WIDTH": 6,
              "WORD_BITWIDTH": 16
            },
            "isa": {
              "format": {
                "instr_bitwidth": 32,
                "instr_type_bitwidth": 1,
                "instr_opcode_bitwidth": 3,
                "instr_slot_bitwidth": 4
              },
              "instructions": [
                {
                  "name": "dsu",
                  "opcode": 6,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "init_addr_sd",
                      "comment": "Is initial address static or dynamic?",
                      "bitwidth": 1,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "s"
                        },
                        {
                          "key": 1,
                          "val": "d"
                        }
                      ]
                    },
                    {
                      "name": "init_addr",
                      "comment": "Initial address",
                      "bitwidth": 16
                    },
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "rep",
                  "opcode": 0,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                },
                {
                  "name": "repx",
                  "opcode": 1,
                  "instr_type": 1,
                  "segments": [
                    {
                      "name": "port",
                      "comment": "The port number",
                      "bitwidth": 2,
                      "verbo_map": [
                        {
                          "key": 0,
                          "val": "address generation for input buffer"
                        },
                        {
                          "key": 1,
                          "val": "address generation for output buffer"
                        },
                        {
                          "key": 2,
                          "val": "if in first slot, address generation for writing to SRAM from input buffer; if in second slot, address generation for writing to SRAM (BULK)"
                        },
                        {
                          "key": 3,
                          "val": "if in first slot, address generation for read from SRAM to output buffer; if in second slot, address generation for reading from SRAM (BULK)"
                        }
                      ]
                    },
                    {
                      "name": "level",
                      "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
                      "bitwidth": 4
                    },
                    {
                      "name": "iter",
                      "comment": "level-1 iteration - 1.",
                      "bitwidth": 6
                    },
                    {
                      "name": "step",
                      "comment": "level-1 step",
                      "bitwidth": 6,
                      "default_val": 1,
                      "is_signed": true
                    },
                    {
                      "name": "delay",
                      "comment": "delay",
                      "bitwidth": 6
                    }
                  ]
                }
              ]
            }
          }
        ],
        "isa": {
          "format": {
            "instr_bitwidth": 32,
            "instr_type_bitwidth": 1,
            "instr_opcode_bitwidth": 3,
            "instr_slot_bitwidth": 4
          },
          "instructions": []
        },
        "fingerprint_table": {
          "iosram_btm_impl": "_auoccatktx4",
          "sequencer_impl": "_bofiw7zs7vj",
          "swb_impl": "_kmcyy4g8mbb"
        }
      }
    }
  ],
  "parameters": {
    "BULK_WIDTH": 256,
    "COLS": 1,
    "INSTR_ADDR_WIDTH": 6,
    "INSTR_DATA_WIDTH": 32,
    "INSTR_HOPS_WIDTH": 4,
    "INSTR_OPCODE_BITWIDTH": 3,
    "IO_ADDR_WIDTH": 16,
    "IO_DATA_WIDTH": 256,
    "RESOURCE_INSTR_WIDTH": 27,
    "ROWS": 3
  },
  "fingerprint_table": {
    "iosram_top_impl": "_fuznrwegsgm",
    "dpu_impl": "_pnkjyubmn1c",
    "sequencer_impl": "_bofiw7zs7vj",
    "iosram_btm_impl": "_auoccatktx4",
    "cell_btm_impl": "_utrqvpzgeyt",
    "cell_mid_impl": "_jz3bdsce94z",
    "cell_top_impl": "_wd4bmxzzxrs",
    "swb_impl": "_kmcyy4g8mbb",
    "rf_impl": "_dyqn9udjnhi"
  }
}
