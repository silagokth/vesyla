!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc3 = loc("dot32.cpp":2:13)
#loc4 = loc("dot32.cpp":2:26)
#loc5 = loc("dot32.cpp":2:29)
#loc6 = loc("dot32.cpp":2:42)
#loc7 = loc("dot32.cpp":2:45)
#loc8 = loc("dot32.cpp":2:49)
#loc32 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc5, #loc6])
#loc34 = loc(fused[#loc7, #loc8])
module @"/home/paul/Develop/vesyla/modules/vs-compile/src/cdfg/example/dot32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func dso_local @_Z5dot32PKfS0_i(%arg0: !cir.ptr<!cir.float> loc(fused[#loc3, #loc4]), %arg1: !cir.ptr<!cir.float> loc(fused[#loc5, #loc6]), %arg2: !s32i loc(fused[#loc7, #loc8])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["a", init] {alignment = 8 : i64} loc(#loc32)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["b", init] {alignment = 8 : i64} loc(#loc33)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["n", init] {alignment = 4 : i64} loc(#loc34)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["result", init] {alignment = 4 : i64} loc(#loc35)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc11)
    cir.store %arg1, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc11)
    cir.store %arg2, %2 : !s32i, !cir.ptr<!s32i> loc(#loc11)
    %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc10)
    cir.store align(4) %5, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc35)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc37)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store align(4) %9, %8 : !s32i, !cir.ptr<!s32i> loc(#loc37)
      cir.for : cond {
        %10 = cir.load align(4) %8 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %11 = cir.load align(4) %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc38)
        cir.condition(%12) loc(#loc38)
      } body {
        cir.scope {
          %10 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc19)
          %11 = cir.load align(4) %8 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!cir.float>, %11 : !s32i), !cir.ptr<!cir.float> loc(#loc21)
          %13 = cir.load align(4) %12 : !cir.ptr<!cir.float>, !cir.float loc(#loc19)
          %14 = cir.load align(8) %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc22)
          %15 = cir.load align(4) %8 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %16 = cir.ptr_stride(%14 : !cir.ptr<!cir.float>, %15 : !s32i), !cir.ptr<!cir.float> loc(#loc24)
          %17 = cir.load align(4) %16 : !cir.ptr<!cir.float>, !cir.float loc(#loc22)
          %18 = cir.binop(mul, %13, %17) : !cir.float loc(#loc19)
          %19 = cir.load align(4) %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc25)
          %20 = cir.binop(add, %19, %18) : !cir.float loc(#loc25)
          cir.store align(4) %20, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc40)
        } loc(#loc39)
        cir.yield loc(#loc13)
      } step {
        %10 = cir.load align(4) %8 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc27)
        cir.store align(4) %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc41)
        cir.yield loc(#loc36)
      } loc(#loc36)
    } loc(#loc36)
    %6 = cir.load align(4) %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc29)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc42)
    %7 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc42)
    cir.return %7 : !cir.float loc(#loc42)
  } loc(#loc31)
} loc(#loc)
#loc = loc("/home/paul/Develop/vesyla/modules/vs-compile/src/cdfg/example/dot32.cpp":0:0)
#loc1 = loc("dot32.cpp":2:1)
#loc2 = loc("dot32.cpp":8:1)
#loc9 = loc("dot32.cpp":3:3)
#loc10 = loc("dot32.cpp":3:18)
#loc11 = loc("dot32.cpp":2:52)
#loc12 = loc("dot32.cpp":4:3)
#loc13 = loc("dot32.cpp":6:3)
#loc14 = loc("dot32.cpp":4:8)
#loc15 = loc("dot32.cpp":4:16)
#loc16 = loc("dot32.cpp":4:19)
#loc17 = loc("dot32.cpp":4:23)
#loc18 = loc("dot32.cpp":4:31)
#loc19 = loc("dot32.cpp":5:15)
#loc20 = loc("dot32.cpp":5:17)
#loc21 = loc("dot32.cpp":5:18)
#loc22 = loc("dot32.cpp":5:22)
#loc23 = loc("dot32.cpp":5:24)
#loc24 = loc("dot32.cpp":5:25)
#loc25 = loc("dot32.cpp":5:12)
#loc26 = loc("dot32.cpp":5:5)
#loc27 = loc("dot32.cpp":4:26)
#loc28 = loc("dot32.cpp":4:28)
#loc29 = loc("dot32.cpp":7:10)
#loc30 = loc("dot32.cpp":7:3)
#loc31 = loc(fused[#loc1, #loc2])
#loc35 = loc(fused[#loc9, #loc10])
#loc36 = loc(fused[#loc12, #loc13])
#loc37 = loc(fused[#loc14, #loc15])
#loc38 = loc(fused[#loc16, #loc17])
#loc39 = loc(fused[#loc18, #loc13])
#loc40 = loc(fused[#loc26, #loc24])
#loc41 = loc(fused[#loc27, #loc28])
#loc42 = loc(fused[#loc30, #loc29])
