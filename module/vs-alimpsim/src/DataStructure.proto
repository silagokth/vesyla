syntax = "proto3";

package vs.alimpsim.ds;

message ArchitectureDescription {
  string platfrom = 1;
  repeated Resource resources = 2;
  repeated Controller controllers = 3;
  repeated Cell cells = 4;
  Fabric fabric = 5;
  Interface interface = 6;
}

message Resource {
  string name = 1;
  int32 size = 2;
  int32 word_input_port = 3;
  int32 word_output_port = 4;
  int32 bulk_input_port = 5;
  int32 bulk_output_port = 6;
  repeated StrIntMap custom_properties = 7;
}

message Controller {
  string name = 1;
  int32 size = 2;
  int32 iram_size = 3;
  repeated StrIntMap custom_properties = 4;
}

message Cell {
  string name = 1;
  string controller = 2;
  repeated string resource_list = 3;
  repeated StrIntMap custom_properties = 4;
}

message Fabric {
  int32 height = 1;
  int32 width = 2;
  repeated CellList cell_lists = 3;
  repeated StrIntMap custom_properties = 4;
}

message Interface {
  int32 input_buffer_depth = 1;
  int32 output_buffer_depth = 2;
}

message CellList {
  string cell_name = 1;
  repeated Coordinate coordinates = 2;
}

message Coordinate {
  int32 row = 1;
  int32 col = 2;
}

message DataBase {
  InstructionSet isa = 1;
  InstructionPackage pkg = 2;
  ArchitectureDescription arch = 3;
}

message InstructionSet {
  string platform = 1;
  int32 instr_bitwidth = 2;
  int32 instr_code_bitwidth = 3;
  repeated InstrctionTemplate instruction_templates = 4;
}

message InstrctionTemplate {
  string name = 1;
  int32 code = 2;
  repeated string machines = 3;
  repeated SegmentTemplate segment_templates = 4;
}

message SegmentTemplate {
  string name = 1;
  int32 bitwidth = 2;
  bool is_signed = 3;
  int32 default_val = 4;
  repeated IntStrMap verbo_map = 5;
  string comment = 6;
}

message InstructionPackage {
  string name = 1;
  string version = 2;
  string platform = 3;
  repeated InstructionList instruction_lists = 4;
}

message InstructionList {
  string label = 1;
  repeated Instruction instructions = 2;
}

message Instruction {
  string name = 1;
  repeated StrIntMap value_map = 2;
  repeated StrIntMap int_info_map = 3;
  repeated StrStrMap str_info_map = 4;
}

message StrIntMap {
  string key = 1;
  int32 val = 2;
}

message StrStrMap {
  string key = 1;
  string val = 2;
}

message IntStrMap {
  int32 key = 1;
  string val = 2;
}
