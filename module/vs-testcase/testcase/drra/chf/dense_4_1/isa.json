{
  "platform": "DRRA-2",
  "instr_bitwidth": 32,
  "instr_code_bitwidth": 4,
  "instruction_templates": [
    {
      "code": 0,
      "name": "halt",
      "machines": ["controller_io", "controller_normal"]
    },
    {
      "code": 1,
      "name": "wait",
      "machines": ["controller_io", "controller_normal"],
      "segment_templates": [
        {
          "name": "mode",
          "comment": "Wait mode, 0 means wait for a number of cycles, 1 means wait for events.",
          "bitwidth": 1
        },
        {
          "name": "cycle",
          "comment": "If mode is 0, it means the extra cycles to wait excluding the current cycle when this wait instruction is issued. If the mode is 1, this is the 1-hot encoding of event slots.",
          "bitwidth": 27
        }
      ]
    },
    {
      "code": 2,
      "name": "act",
      "machines": ["controller_io", "controller_normal"],
      "segment_templates": [
        {
          "name": "ports",
          "comment": "1-hot encoded slots that need to be activated.",
          "bitwidth": 16
        },
        {
          "name": "mode",
          "comment": "Filter mode: [0]: Continues ports start from slot X; [1] All port X in each slot; [2]: the predefined 64-bit activation code in internal activation memory location X.",
          "bitwidth": 4
        },
        {
          "name": "param",
          "comment": "The parameter for the filter mode.",
          "bitwidth": 8
        }
      ]
    },
    {
      "code": 3,
      "name": "calc",
      "machines": ["controller_io", "controller_normal"],
      "segment_templates": [
        {
          "name": "mode",
          "comment": "Calculation mode",
          "bitwidth": 6,
          "verbo_map": [
            { "key": 0, "val": "idle" },
            { "key": 1, "val": "add" },
            { "key": 2, "val": "sub" },
            { "key": 3, "val": "lls" },
            { "key": 4, "val": "lrs" },
            { "key": 5, "val": "mul" },
            { "key": 6, "val": "div" },
            { "key": 7, "val": "mod" },
            { "key": 8, "val": "bitand" },
            { "key": 9, "val": "bitor" },
            { "key": 10, "val": "bitinv" },
            { "key": 11, "val": "bitxor" },
            { "key": 17, "val": "eq" },
            { "key": 18, "val": "ne" },
            { "key": 19, "val": "gt" },
            { "key": 20, "val": "ge" },
            { "key": 21, "val": "lt" },
            { "key": 22, "val": "le" },
            { "key": 32, "val": "and" },
            { "key": 33, "val": "or" },
            { "key": 34, "val": "not" }
          ]
        },
        {
          "name": "operand1",
          "comment": "First operand.",
          "bitwidth": 4
        },
        {
          "name": "operand2_sd",
          "comment": "Is the second operand static or dynamic?",
          "bitwidth": 1,
          "verbo_map": [
            { "key": 0, "val": "s" },
            { "key": 1, "val": "d" }
          ]
        },
        {
          "name": "operand2",
          "comment": "Second operand.",
          "bitwidth": 8
        },
        {
          "name": "result",
          "comment": "The register to store the result. It could be the scalar register or flag register, depending on the calculation mode.",
          "bitwidth": 4
        }
      ]
    },
    {
      "code": 4,
      "name": "brn",
      "machines": ["controller_io", "controller_normal"],
      "segment_templates": [
        {
          "name": "reg",
          "comment": "The flag register",
          "bitwidth": 4
        },
        {
          "name": "target_true",
          "comment": "The PC to jump to in case the condition is true. The PC is relative to the current PC.",
          "is_signed": true,
          "bitwidth": 9
        },
        {
          "name": "target_false",
          "comment": "The PC to jump to in case the condition is false. The PC is relative to the current PC.",
          "is_signed": true,
          "bitwidth": 9
        }
      ]
    },
    {
      "code": 12,
      "name": "swb",
      "machines": ["swb"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "option",
          "comment": "configuration option",
          "bitwidth": 2
        },
        {
          "name": "channel",
          "comment": "Bus channel. Note: if the SWB is implemented by a crossbar, the channel is always equals to the target slot.",
          "bitwidth": 4
        },
        {
          "name": "source",
          "comment": "Source slot.",
          "bitwidth": 4
        },
        {
          "name": "target",
          "comment": "Target slot.",
          "bitwidth": 4
        }
      ]
    },
    {
      "code": 13,
      "name": "route",
      "machines": ["swb"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "option",
          "comment": "configuration option",
          "bitwidth": 2
        },
        {
          "name": "sr",
          "comment": "Send or receive.",
          "bitwidth": 1,
          "verbo_map": [
            { "key": 0, "val": "s" },
            { "key": 1, "val": "r" }
          ]
        },
        {
          "name": "source",
          "comment": "1-hot encoded direction: E/N/W/S. If it's a receive instruction, the direction can only have 1 bit set to 1.",
          "bitwidth": 4
        },
        {
          "name": "target",
          "comment": "1-hot encoded slot number. If it's a send instruction, the slot can only have 1 bit set to 1.",
          "bitwidth": 16
        }
      ]
    },
    {
      "code": 8,
      "name": "rep",
      "machines": ["swb", "iosram", "dpu", "rf", "sram"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "port",
          "comment": "The port number",
          "bitwidth": 2,
          "verbo_map": [
            { "key": 0, "val": "read narrow" },
            { "key": 1, "val": "read wide" },
            { "key": 2, "val": "write narrow" },
            { "key": 3, "val": "write wide" }
          ]
        },
        {
          "name": "level",
          "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
          "bitwidth": 4
        },
        {
          "name": "iter",
          "comment": "level-1 iteration - 1.",
          "bitwidth": 6
        },
        {
          "name": "step",
          "comment": "level-1 step",
          "bitwidth": 6,
          "default_val": 1,
          "is_signed": true
        },
        {
          "name": "delay",
          "comment": "delay",
          "bitwidth": 6
        }
      ]
    },
    {
      "code": 9,
      "name": "repx",
      "machines": ["swb", "iosram", "dpu", "rf", "sram"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "port",
          "comment": "The port number",
          "bitwidth": 2,
          "verbo_map": [
            { "key": 0, "val": "read narrow" },
            { "key": 1, "val": "read wide" },
            { "key": 2, "val": "write narrow" },
            { "key": 3, "val": "write wide" }
          ]
        },
        {
          "name": "level",
          "comment": "The level of the REP instruction. [0]: inner most level, [15]: outer most level.",
          "bitwidth": 4
        },
        {
          "name": "iter",
          "comment": "level-1 iteration - 1.",
          "bitwidth": 6
        },
        {
          "name": "step",
          "comment": "level-1 step",
          "bitwidth": 6,
          "default_val": 1,
          "is_signed": true
        },
        {
          "name": "delay",
          "comment": "delay",
          "bitwidth": 6
        }
      ]
    },
    {
      "code": 10,
      "name": "mask",
      "machines": ["iosram", "rf", "sram"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "chunk",
          "comment": "Mask chunk of 16 elements. If each element is 16-bit, only 1 chunk is needed. If each element is 8-bit, 2 chunks are needed. If each element is 4-bit, 4 chunks are needed. If each element is 2-bit, 8 chunks are needed.",
          "bitwidth": 3
        },
        {
          "name": "mask",
          "comment": "The mask of 16-elements. If mask-bit is 0, then the corresponding element is useful and will be written to destination memory block. If mask-bit is 1, then the corresponding element is not useful and will be ignored.",
          "bitwidth": 6
        }
      ]
    },

    {
      "code": 11,
      "name": "dpu",
      "machines": ["dpu"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "option",
          "comment": "Configuration option.",
          "bitwidth": 2
        },
        {
          "name": "mode",
          "comment": "The DPU mode. ",
          "bitwidth": 5,
          "verbo_map": [
            { "key": 0, "val": "idle" },
            { "key": 1, "val": "add" },
            { "key": 2, "val": "sum_acc" },
            { "key": 3, "val": "add_const" },
            { "key": 4, "val": "subt" },
            { "key": 5, "val": "subt_abs" },
            { "key": 6, "val": "mode_6" },
            { "key": 7, "val": "mult" },
            { "key": 8, "val": "mult_add" },
            { "key": 9, "val": "mult_const" },
            { "key": 10, "val": "mac" },
            { "key": 11, "val": "ld_ir" },
            { "key": 12, "val": "axpy" },
            { "key": 13, "val": "max_min_acc" },
            { "key": 14, "val": "max_min_const" },
            { "key": 15, "val": "mode_15" },
            { "key": 16, "val": "max_min" },
            { "key": 17, "val": "shift_l" },
            { "key": 18, "val": "shift_r" },
            { "key": 19, "val": "sigm" },
            { "key": 20, "val": "tanhyp" },
            { "key": 21, "val": "expon" },
            { "key": 22, "val": "lk_relu" },
            { "key": 23, "val": "relu" },
            { "key": 24, "val": "div" },
            { "key": 25, "val": "acc_softmax" },
            { "key": 26, "val": "div_softmax" },
            { "key": 27, "val": "ld_acc" },
            { "key": 28, "val": "scale_dw" },
            { "key": 29, "val": "scale_up" },
            { "key": 30, "val": "mac_inter" },
            { "key": 31, "val": "mode_31" }
          ]
        },
        {
          "name": "immediate",
          "comment": "The immediate field used by some DPU modes.",
          "bitwidth": 16
        }
      ]
    },

    {
      "code": 10,
      "name": "fsm",
      "machines": ["swb", "dpu"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "port",
          "comment": "The port number",
          "bitwidth": 2
        },
        {
          "name": "delay_0",
          "comment": "Delay between state 0 and 1.",
          "bitwidth": 7
        },
        {
          "name": "delay_1",
          "comment": "Delay between state 1 and 2.",
          "bitwidth": 7
        },
        {
          "name": "delay_2",
          "comment": "Delay between state 2 and 3.",
          "bitwidth": 7
        }
      ]
    },
    {
      "code": 14,
      "name": "dsu",
      "machines": ["iosram", "rf", "sram"],
      "segment_templates": [
        {
          "name": "slot",
          "comment": "Slot number",
          "bitwidth": 4
        },
        {
          "name": "init_addr_sd",
          "comment": "Is initial address static or dynamic?",
          "bitwidth": 1,
          "verbo_map": [
            { "key": 0, "val": "s" },
            { "key": 1, "val": "d" }
          ]
        },
        {
          "name": "init_addr",
          "comment": "Initial address",
          "bitwidth": 16
        },
        {
          "name": "port",
          "comment": "The port number",
          "bitwidth": 2,
          "verbo_map": [
            { "key": 0, "val": "read narrow" },
            { "key": 1, "val": "read wide" },
            { "key": 2, "val": "write narrow" },
            { "key": 3, "val": "write wide" }
          ]
        }
      ]
    }
  ]
}
